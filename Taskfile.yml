# yaml-language-server: $schema=https://json.schemastore.org/taskfile.json
version: "3"

vars:
  vscode_extensions: |
    budparr.language-hugo-vscode
    esbenp.prettier-vscode
    mitsuhiko.insta
    prql-lang.prql-vscode
    rust-lang.rust-analyzer

tasks:
  suggest-vscode-extensions:
    desc: Check and suggest VS Code extensions.
    vars:
      extensions:
        # List extensions, or just return true if we can't find `code`.
        sh: which code && code --list-extensions || true
      missing_extensions: |
        {{ range ( .vscode_extensions | trim | splitLines ) -}}
          {{ if not (contains . $.extensions) }}‚ùå {{.}} {{else}}‚úÖ {{.}} {{ end }}
        {{ end -}}
    status:
      # If vscode isn't installed, or there are no missing extensions,
      # return 0 and exit early.
      - '[ ! -x "$(which code)" ] || {{ not (contains "‚ùå" .missing_extensions)
        }}'
    silent: true
    cmds:
      - |
        echo "

        üü° It looks like VS Code is installed but doesn't have all recommended extensions installed:
        {{ .missing_extensions }}

        Install them with:

          task install-vscode-extensions
          "

  install-vscode-extensions:
    desc: Install recommended VS Code extensions.
    cmds:
      - |
        {{ range ( .vscode_extensions | trim | splitLines ) -}}
          code --install-extension {{.}}
        {{ end -}}

  install-brew-dependencies:
    status:
      - which hugo
      - which npm
      # Check for a recent npm version
      - "[ $(npm -v | cut -d. -f1) -ge 9 ]"
      - which python3
      - which elixir
    preconditions:
      - sh: which brew
        msg: |


          üî¥ Can't find `brew`, which we use to install Hugo & npm. Either install brew and re-run this, or install them directly based on:
          - https://gohugo.io/getting-started/installing/
          - https://docs.npmjs.com/downloading-and-installing-node-js-and-npm
    cmds:
      - brew install hugo npm python3 elixir

  install-npm-dependencies:
    cmds:
      - npm install --location=global prettier prettier-plugin-go-template
      - cmd:
          echo "In order to get nice auto-formatting of web code in VS Code, VS
          Code requires configuration to use the system-wide install of
          prettier. See
          https://github.com/NiklasPor/prettier-plugin-go-template/issues/58#issuecomment-1085060511
          for more info."
        silent: true

  test-all:
    desc: Test everything, accepting snapshots.
    summary: |
      Test everything, accepting snapshots.

      Running this isn't required when developing; it's for caching or as a reference.

    cmds:
      # TODO: this doesn't run the python tests. We should add them in here.
      # They are run in `test-all.yaml` on GHA.
      - task: test-rust
      - task: build-all
      - task: test-js
      - pre-commit run -a

  test-rust:
    desc: Test all rust code, accepting snapshots.
    # Commenting out the ability to watch, since Task doesn't handle watching
    # big directories well: https://github.com/go-task/task/issues/985
    #
    # sources:
    #   - "**/*.rs"
    #   - "**/*.md"
    #   - "**/*.toml"
    #   - "**/*.lock"
    #   - "**/*.snap"
    cmds:
      # Only delete unreferenced snapshots on the default target ‚Äî lots are
      # excluded under wasm.
      - cargo insta test --accept --features=test-dbs --unreferenced=auto
      - cargo insta test --accept --target=wasm32-unknown-unknown

  test-rust-fast:
    desc: Test prql-compiler's unit tests.
    summary: |
      Test prql-compiler's unit tests, including accepting snapshots.

      This can be useful as an inner loop when developing, by running this on any file change.
      Use `-w` to get that behavior:

        task -w test-rust-fast

      New or changed snapshots are accepted, and expected to be reviewed with git.

    env:
      RUST_BACKTRACE: 1
    sources:
      # I don't think we can specify this is a single glob, which would be nice.
      - "prql-compiler/**/*.rs"
      - "prql-compiler/**/*.snap"
    cmds:
      - cargo insta test --accept -p prql-compiler --lib -- --quiet

  test-js:
    dir: bindings/prql-js
    cmds:
      - npm cit

  # Currently disabled; see prql-elixir/README.md for details
  test-elixir:
    dir: bindings/prql-elixir
    cmds:
      # We could move this line into an `install` task
      - mix local.hex --force
      - mix deps.get --force
      - mix compile
      - mix test

  run-playground-cached:
    desc: Build & serve the playground, without rebuilding rust code.
    dir: web/playground
    cmds:
      - task: install-playground-npm-dependencies
      - npm start

  install-playground-npm-dependencies:
    # Look to see if npm dependencies need to be updated
    # Use task's sources/generates to see if checksums of
    # node_modules directory have changed since package.json was updated

    # Use `npm install --install-links=false` to install prql-js
    # as the regular dependency, instead of creating a
    # symlink. Refer to https://github.com/PRQL/prql/pull/1296.
    desc: Check to see if package.json has changed since we ran npm install
    dir: web/playground
    cmds:
      - npm install --install-links=false
    sources:
      - package.json
    generates:
      - node_modules/*
